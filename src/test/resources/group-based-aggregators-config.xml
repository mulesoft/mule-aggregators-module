<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:aggregators="http://www.mulesoft.org/schema/mule/aggregators"
      xmlns:test="http://www.mulesoft.org/schema/mule/test"
      xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
      http://www.mulesoft.org/schema/mule/aggregators http://www.mulesoft.org/schema/mule/aggregators/current/mule-aggregators.xsd
      http://www.mulesoft.org/schema/mule/test http://www.mulesoft.org/schema/mule/test/current/mule-test.xsd">

    <flow name="aggregationCompleteRoute">
        <aggregators:group-based-aggregator name="1" groupId="#[vars.gid]" groupSize="2">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <flow-ref name="onComplete"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="aggregationCompleteListener">
        <aggregators:aggregator-listener aggregatorName="1"/>
        <flow-ref name="onListener"/>
    </flow>

    <flow name="incrementalAggregationRoute">
        <aggregators:group-based-aggregator name="2"  groupId="#[vars.gid]" groupSize="3">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:incremental-aggregation>
                <flow-ref name="onIncremental"/>
            </aggregators:incremental-aggregation>
            <aggregators:aggregation-complete>
                <test:processor/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="shortEvictionTime">
        <aggregators:group-based-aggregator name="3"  groupId="#[vars.gid]" groupSize="1"
                                            evictionTime="500" evictionTimeUnit="MILLISECONDS">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <flow-ref name="onComplete"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="groupCompleteExceptionThrowingFlow">
        <aggregators:group-based-aggregator name="4"  groupId="#[vars.gid]" groupSize="1">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <flow-ref name="onComplete"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
        <error-handler>
            <test:on-error-check-log>
                <test:check-summary>
                    <test:summary-info key="Error type" value="AGGREGATORS:GROUP_COMPLETED"/>
                </test:check-summary>
            </test:on-error-check-log>
        </error-handler>
    </flow>

    <flow name="noGroupIdExceptionThrowingFlow">
        <aggregators:group-based-aggregator name="5"  groupId="#[vars.notExistentVariable]">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <flow-ref name="onComplete"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
        <error-handler>
            <test:on-error-check-log>
                <test:check-summary>
                    <test:summary-info key="Error type" value="AGGREGATORS:NO_GROUP_ID"/>
                </test:check-summary>
            </test:on-error-check-log>
        </error-handler>
    </flow>

    <flow name="noGroupSizeExceptionThrowingFlow">
        <aggregators:group-based-aggregator name="6"  groupSize="#[vars.notExistentVariable]">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <flow-ref name="onComplete"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
        <error-handler>
            <test:on-error-check-log>
                <test:check-summary>
                    <test:summary-info key="Error type" value="AGGREGATORS:NO_GROUP_SIZE"/>
                </test:check-summary>
            </test:on-error-check-log>
        </error-handler>
    </flow>

    <flow name="groupTimedOutExceptionThrowingFlow">
        <aggregators:group-based-aggregator name="7"  groupSize="100" groupId="#[vars.gid]"
                                            timeout="500" timeoutUnit="MILLISECONDS">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <flow-ref name="onComplete"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
        <error-handler>
            <test:on-error-check-log>
                <test:check-summary>
                    <test:summary-info key="Error type" value="AGGREGATORS:GROUP_TIMED_OUT"/>
                </test:check-summary>
            </test:on-error-check-log>
        </error-handler>
    </flow>

    <flow name="shortTimeoutAggregator">
        <aggregators:group-based-aggregator name="8"  groupSize="100" timeout="500"
                                            timeoutUnit="MILLISECONDS">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <flow-ref name="onComplete"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="timeoutListener">
        <aggregators:aggregator-listener aggregatorName="8" includeTimedOutGroups="true"/>
        <flow-ref name="onListener"/>
    </flow>

    <flow name="shortTimeoutAggregator2">
        <aggregators:group-based-aggregator name="9"  groupSize="100" timeout="500"
                                            timeoutUnit="MILLISECONDS">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <flow-ref name="onComplete"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="timeoutListener2">
        <aggregators:aggregator-listener aggregatorName="9" includeTimedOutGroups="false"/>
        <flow-ref name="onListener"/>
    </flow>

    <flow name="shortTimeoutAndEvictionTime">
        <aggregators:group-based-aggregator name="10"  groupSize="1" groupId="#[vars.gid]"
                                            timeout="1000" timeoutUnit="MILLISECONDS" evictionTime="500"
                                            evictionTimeUnit="MILLISECONDS">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <flow-ref name="onComplete"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="attributesAreSet">
        <aggregators:group-based-aggregator name="11" groupId="uniqueId"  groupSize="2">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <test:assert expression="#[attributes.isGroupComplete == true]"/>
                <test:assert expression="#[attributes.aggregationId == 'uniqueId']"/>
                <test:assert expression="#[attributes.firstItemArrivalTime != attributes.lastItemArrivalTime ]"/>
                <test:assert expression="#[attributes.firstItemArrivalTime != null]"/>
                <test:assert expression="#[attributes.lastItemArrivalTime != null]"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="propagateVariables">
        <aggregators:group-based-aggregator name="12"  groupId="someId" groupSize="2">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:incremental-aggregation>
                <set-variable variableName="#[vars.variableKey]" value="#[vars.variableValue]"/>
            </aggregators:incremental-aggregation>
            <aggregators:aggregation-complete>
                <set-variable variableName="#[vars.variableKey]" value="#[vars.variableValue]"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="onIncrementalIdCheck">
        <aggregators:group-based-aggregator name="13"  groupId="#[vars.gid]" groupSize="3">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:incremental-aggregation>
                <test:assert expression="#[vars.gid == attributes.aggregationId]"/>
            </aggregators:incremental-aggregation>
            <aggregators:aggregation-complete>
                <test:processor/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="onCompleteAndListenerIdCheck">
        <aggregators:group-based-aggregator name="14"  groupId="#[vars.gid]" groupSize="2">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:incremental-aggregation>
                <test:processor/>
            </aggregators:incremental-aggregation>
            <aggregators:aggregation-complete>
                <test:assert expression="#[vars.gid == attributes.aggregationId]"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="idCheckListener">
        <aggregators:aggregator-listener aggregatorName="14"/>
        <set-payload value="#[correlationId]"/>
        <flow-ref name="onListener"/>
    </flow>

    <flow name="evictImmediately">
        <aggregators:group-based-aggregator name="15" groupId="someId" groupSize="1" evictionTime="0">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <flow-ref name="onComplete"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="sortedItems">
        <aggregators:group-based-aggregator name="16" groupId="someId" groupSize="3">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <flow-ref name="onComplete"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="sortedMixedItems">
        <aggregators:group-based-aggregator name="17" groupId="someId" groupSize="5">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <flow-ref name="onComplete"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="scheduledAggregationNotExecuted">
        <aggregators:group-based-aggregator name="18"  groupId="someId" groupSize="3" timeout="2" timeoutUnit="SECONDS">
            <aggregators:content>
                #[payload]
            </aggregators:content>
            <aggregators:aggregation-complete>
                <flow-ref name="onComplete"/>
            </aggregators:aggregation-complete>
        </aggregators:group-based-aggregator>
    </flow>

    <flow name="scheduledAggregationNotExecutedListener">
        <aggregators:aggregator-listener aggregatorName="18" includeTimedOutGroups="true"/>
        <flow-ref name="onListener"/>
    </flow>

    <flow name="onComplete">
        <set-variable variableName="executionRoute" value="aggregationComplete"/>
        <test:processor class="org.mule.functional.util.FlowExecutionLogger"/>
    </flow>

    <flow name="onIncremental">
        <set-variable variableName="executionRoute" value="incrementalAggregation"/>
        <test:processor class="org.mule.functional.util.FlowExecutionLogger"/>
    </flow>

    <flow name="onListener">
        <set-variable variableName="executionRoute" value="listenerCalled"/>
        <test:processor class="org.mule.functional.util.FlowExecutionLogger"/>
    </flow>

</mule>